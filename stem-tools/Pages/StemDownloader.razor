@page "/StemDownloader"
@using Newtonsoft.Json.Linq
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<h3>Stems</h3>

<label for="serial_number">Serial Number: </label>
<input type="text" value="@SerialNumber" @oninput="OnSerialNumberChanged" id="serial_number" />
@if (!Tracks.Any())
{
    <p>
        <em>Loading...</em>
    </p>
    
}
else
{
    <table>
        <thead>
            <tr>
                <style>
                    thead > tr > td {
                        text-align: center;
                        font-weight: bold;
                    }
                </style>
                <td>Album</td>
                <td>Track</td>
                <td>Artists</td>
                <td>Version</td>
                <td>Download Stems</td>
            </tr>
        </thead>
        <tbody>
        @foreach (var track in Tracks)
        {
            <tr>
                <td style="text-align:center">@track.AlbumTitle</td>
                <td style="text-align:center">@track.Title</td>
                <td style="text-align:center">@string.Join(", ", track.Artists)</td>
                <td>
                   <input @bind="@track.Version"/>
                </td>
                <td style="text-align:center">
                    @if (IsSerialNumberValid)
                    {
                        <button onclick="@(async () => await DownloadStems(track))">
                            ↓
                        </button>
                    }
                    else
                    {
                        <button disabled>↓</button>
                    }
                
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    List<Track> Tracks { get; } = new();

    private string? SerialNumber { get; set; }

    private bool IsSerialNumberValid { get; set; } = true;

    private async Task OnSerialNumberChanged(ChangeEventArgs e)
    {
        var sn = e.Value?.ToString();

        Console.WriteLine("isDecimal: " + decimal.TryParse(sn, out _));
        IsSerialNumberValid = decimal.TryParse(sn, out _) && sn.Length == 24;
        Console.WriteLine("isvalid: " + IsSerialNumberValid);
        if (IsSerialNumberValid)
        {
            await JsRuntime.InvokeVoidAsync("localStorage.setItem", "sn", sn);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("hello world");
        SerialNumber = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "sn");
        var albumsResponseString = await Http.GetStringAsync("https://api.stemplayer.com/content/albums");
        dynamic responseJson = JObject.Parse(albumsResponseString);
        var data = responseJson.data;
        foreach (var albumObject in data)
        {
            var albumData = albumObject.Value;
            string albumTitle = albumData.title.ToString();
            var tracks = albumData.tracks;
            foreach (var track in tracks)
            {
                string version = track.version;
                string id = track.id;
                string title = track.metadata.title;
                JArray artistsJArray = track.metadata.artists;
                var artists = artistsJArray.Select(j => j.ToString()).ToArray();
                Tracks.Add(new Track(title, artists, albumTitle, id, version));
              
            }
        }
        
    }

    public class Track
    {

        public Track(string title, string[] artists, string albumTitle, string id, string version)
        {
            Title = title;
            Artists = artists;
            AlbumTitle = albumTitle;
            Id = id;
            Version = version;
        }

        public string Title { get; }
        public string[] Artists { get; }
        public string AlbumTitle { get; }
        public string Id { get; }
        public string Version { get; set; }

        public override string ToString() => $"{Title} by {string.Join(", ", Artists)}";
    }
    
    async Task DownloadStems(Track track)
    {
        var urls = (await GetStemUrls(track)).ToArray();

        for (int i = 0; i < urls.Length; i++)
        {
            var respData = await Http.GetStreamAsync(urls[i]);
            using var streamRef = new DotNetStreamReference(stream: respData);

            await JsRuntime.InvokeVoidAsync("downloadFileFromStream",  track.Title + $"_{i+1}.mp3", streamRef);

        }
   
    }

    async Task JsAlert(string message)
    {
        await JsRuntime.InvokeVoidAsync("alert", message);
    }

    async Task<IEnumerable<string>> GetStemUrls(Track track)
    {
        const string codec = "mp3";
        var requestUrl = $"https://api.stemplayer.com/content/stems?track_id={track.Id}&version={track.Version}&codec={codec}&device_id={SerialNumber}";
        var responseString = await Http.GetStringAsync(requestUrl);
        dynamic responseJson = JObject.Parse(responseString);
        var data = responseJson.data;
        var stemUrls = new List<string>();
        foreach (var stemUrlData in data)
        {
            stemUrls.Add(stemUrlData.Value.ToString());
        }
        return stemUrls;
    }
}