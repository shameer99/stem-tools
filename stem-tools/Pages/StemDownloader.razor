@page "/StemDownloader"
@using Newtonsoft.Json.Linq
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<MudText Typo="Typo.h3" GutterBottom="true">Download Stems</MudText>
<MudText Class="mb-8">This site does not host any content. Calls are made to <MudLink Href="https://api.stemplayer.com">api.stemplayer.com</MudLink> to retrieve data.</MudText>

<MudTextField T="string"
              Variant="Variant.Outlined"
              Immediate="true"
              Label="Serial Number"
              Required="true"
              @bind-Value="SerialNumber"
              Validation="@(new Func<string, IEnumerable<string>>(ValidateSerialNumber))"/>
<br/>
@if (Tracks.Any())
{
    <MudText Typo="Typo.h5">Albums:</MudText>
    <MudExpansionPanels>
        @foreach (var album in Tracks.Select(t => t.AlbumTitle).Distinct())
        {
            <MudExpansionPanel Text="@album">
                <MudExpansionPanels>
                    @foreach (var track in Tracks.Where(t => t.AlbumTitle.Equals(album)))
                    {
                        <MudExpansionPanel Text="@track.ToString()">
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@track.DownloadBass">Download Bass</MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@track.DownloadVocals">Download Vocals</MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@track.DownloadOther">Download Other</MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@track.DownloadDrums">Download Drums</MudButton>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            </MudExpansionPanel>

        }
    </MudExpansionPanels>
}
else
{
    <p>
        <em>Loading...</em>
    </p>
}

@code {
    public class Track
    {
        private readonly Func<Track, StemType, Task> _downloadStemFunc;

        private Track(string title, string[] artists, string albumTitle, string id, string version, Func<Track, StemType, Task> downloadStemFunc)
        {
            _downloadStemFunc = downloadStemFunc;
            Title = title;
            Artists = artists;
            AlbumTitle = albumTitle;
            Id = id;
            Version = version;
        }

        public static Track CreateInstance(string title, string[] artists, string albumTitle, string id, string version, Func<Track, StemType, Task> downloadStemFunc)
        {
            return new Track(title, artists, albumTitle, id, version, downloadStemFunc);
        }

        public string Title { get; }
        public string[] Artists { get; }
        public string AlbumTitle { get; }
        public string Id { get; }
        public string Version { get; set; }

        public override string ToString() => $"{Title} by {string.Join(", ", Artists)}";

        public Task DownloadBass() => _downloadStemFunc(this, StemType.Bass);
        public Task DownloadVocals() => _downloadStemFunc(this, StemType.Vocals);
        public Task DownloadOther() => _downloadStemFunc(this, StemType.Other);
        public Task DownloadDrums() => _downloadStemFunc(this, StemType.Drums);
    }

    List<Track> Tracks { get; } = new();

    private string SerialNumber { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        SerialNumber = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "sn");
        var albumsResponseString = await Http.GetStringAsync("https://api.stemplayer.com/content/albums");
        dynamic responseJson = JObject.Parse(albumsResponseString);
        var data = responseJson.data;
        foreach (var albumObject in data)
        {
            var albumData = albumObject.Value;
            string albumTitle = albumData.title.ToString();
            var tracks = albumData.tracks;
            foreach (var track in tracks)
            {
                string version = track.version;
                string id = track.id;
                string title = track.metadata.title;
                JArray artistsJArray = track.metadata.artists;
                var artists = artistsJArray.Select(j => j.ToString()).ToArray();
                Tracks.Add(Track.CreateInstance(title, artists, albumTitle, id, version, DownloadStem));
            }
        }
        
    }

    public enum StemType
    {
        Bass,
        Vocals,
        Other,
        Drums
    }

    async Task DownloadStem(Track track, StemType stemType)
    {
        var isSerialNumberValid = Decimal.TryParse(SerialNumber, out _) && SerialNumber.Length == 24;
        if (!isSerialNumberValid)
        {
            await JsRuntime.InvokeVoidAsync("alert", "invalid serial number");
            return;
        }
        var urls = (await GetStemUrls(track)).ToArray();
        var index = (int)stemType;
        var respData = await Http.GetStreamAsync(urls[index]);
        using var streamRef = new DotNetStreamReference(stream: respData);

        await JsRuntime.InvokeVoidAsync("downloadFileFromStream",  track.Title + $"_{index+1}.mp3", streamRef);
        await JsRuntime.InvokeVoidAsync("localStorage.setItem", "sn", SerialNumber);
    }

    async Task<IEnumerable<string>> GetStemUrls(Track track)
    {
        const string codec = "mp3";
        Console.WriteLine(SerialNumber);
        var requestUrl = $"https://api.stemplayer.com/content/stems?track_id={track.Id}&version={track.Version}&codec={codec}&device_id={SerialNumber}";
        Console.WriteLine(requestUrl);
        var responseString = await Http.GetStringAsync(requestUrl);
        dynamic responseJson = JObject.Parse(responseString);
        var data = responseJson.data;
        var stemUrls = new List<string>();
        foreach (var stemUrlData in data)
        {
            stemUrls.Add(stemUrlData.Value.ToString());
        }
        return stemUrls;
    }
    
    private IEnumerable<string> ValidateSerialNumber(string arg)
    {

        if (string.IsNullOrEmpty(arg))
        {
            yield return "Serial number must be provided to download/play stems.";
        }
        
        if (!decimal.TryParse(arg, out _))
        {
            yield return "Serial Number must be numeric.";
        }
        if (arg.Length != 24)
        {
            yield return "Serial number is expected to be 24 digits";
        }
    }

}